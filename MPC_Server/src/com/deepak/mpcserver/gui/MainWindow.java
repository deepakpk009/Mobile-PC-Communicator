/*
This file is part of MPC_Server v0.1

MPC_Server is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MPC_Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MPC_Server.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.mpcserver.gui;

import com.deepak.mpcserver.core.bluetooth.BluetoothCommunicator;
import com.deepak.mpcserver.core.bluetooth.BluetoothMessage;
import com.deepak.mpcserver.core.bluetooth.BluetoothReader;
import com.deepak.mpcserver.core.bluetooth.BluetoothUI;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author deepak
 */

/*
 * this class impliments the UI for the project
 * since this class uses the bluetooth communicator for server services
 * the class impliments the bluetooth UI interface and defines the
 * connection established method.
 */
public class MainWindow extends javax.swing.JFrame implements PropertyChangeListener, BluetoothUI {

    // the universal unique identifier for the server service
    private String serviceUUID = "27012f0c68af4fbf8dbe6bbaf7aa432a";
    // server name
    private String serverName = "btserver";
    // the bluetooth communicator object for bluetooth connections
    private BluetoothCommunicator bluetoothCommunicator = null;
    // the bluetooth reader object for reading from the string
    private BluetoothReader bluetoothReader = null;
    // bluetooth message object
    private BluetoothMessage bluetoothMessage = null;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        frameTextArea = new javax.swing.JTextArea();
        inputTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClosingEvent(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                connectButton_MousePressedEvent(evt);
            }
        });

        frameTextArea.setEditable(false);
        frameTextArea.setColumns(20);
        frameTextArea.setRows(5);
        jScrollPane1.setViewportView(frameTextArea);

        inputTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputTextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(connectButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * this method is called when the connect button is pressed
     */
    private void connectButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectButton_MousePressedEvent
        // if button name is connect else disconnect
        if (connectButton.getText().contentEquals("Connect")) {
            // initialise the communicator
            bluetoothCommunicator = new BluetoothCommunicator(this);
            // start service with service uuid and server name
            bluetoothCommunicator.startService(serviceUUID, serverName);
            // create a bluetooth message object
            bluetoothMessage = new BluetoothMessage();
            // add the current class as a listner for the message
            bluetoothMessage.addPropertyChangeListener(this);
            // set the button name to disconnect
            connectButton.setText("Disconnect");
        } else {
            // stop the server service and close the bluetooth connection
            closeBluetoothConnection();
            // set the button name to connect
            connectButton.setText("Connect");
        }

    }//GEN-LAST:event_connectButton_MousePressedEvent

    /*
     * method to stop the server service and close the bluetooth connection
     */
    private void closeBluetoothConnection() {
        // first if the reader is present then
        if (bluetoothReader != null) {
            // stop reading
            bluetoothReader.stopReading();
        }
        // if the bluetooth communicator is present and connected
        if (bluetoothCommunicator != null && bluetoothCommunicator.isConnected()) {
            try {
                // stop the service
                bluetoothCommunicator.stopService();
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    /*
     * this method is called when the UI window is closed
     */
    private void windowClosingEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosingEvent
        // TODO add your handling code here:
        // stop the server service and close the bluetooth connection
        closeBluetoothConnection();
    }//GEN-LAST:event_windowClosingEvent

    /*
     * method called when the input text field key typed event occurs
     */
    private void inputTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextFieldKeyTyped
        // TODO add your handling code here:
        // get the key pressed and
        // if it equals to enter key
        // and if connection is present then
        if (evt.getKeyChar() == KeyEvent.VK_ENTER
                && bluetoothCommunicator != null
                && bluetoothCommunicator.isConnected()) {
            // send the text field content using the bluetooth communicator
            bluetoothCommunicator.SendData(inputTextField.getText());
            // clear the text field content
            inputTextField.setText("");
        }
    }//GEN-LAST:event_inputTextFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JTextArea frameTextArea;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /*
     * this method is called when message is recieved and the bluetooth message content changes
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // append the recieved message to the frame text area
        frameTextArea.append(bluetoothMessage.getMessage());
    }

    /*
     * the connection established method implimentation for the bluetoothUI interface
     */
    public void connectionEstablished() {
        // create bluetooth reader using the data input stream and bluetooth message as the parameter
        bluetoothReader = new BluetoothReader(bluetoothCommunicator.getDataInputStream(), bluetoothMessage);
        // start reading from the streams using the reader
        bluetoothReader.startReading();
    }
}
